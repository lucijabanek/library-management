{
  "openapi": "3.0.0",
  "info": {
    "title": "Library",
    "description": "Open Api Example",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000/"
    }
  ],
  "paths": {
    "/api/v1/member/": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Retrieve all Members",
        "description": "",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Include associated table/s: [User]",
            "require": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "page",
            "in": "query",
            "require": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "require": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved Members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalItems": {
                          "type": "number",
                          "example": 3
                        },
                        "modelRows": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/memberResponse"
                          }
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 1
                        },
                        "currentPage": {
                          "type": "number",
                          "example": 0
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalItems": {
                          "type": "number",
                          "example": 3
                        },
                        "modelRows": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/memberResponse"
                          }
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 1
                        },
                        "currentPage": {
                          "type": "number",
                          "example": 0
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Create new Member",
        "description": "",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Successfully created Member",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Member successfully created!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Member successfully created!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'First name' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "firstName"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'First name' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "firstName"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/memberBody"
              }
            }
          }
        }
      }
    },
    "/api/v1/member/{id}": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Retrieve Member by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Member ID we want to retrieve",
            "required": true,
            "schema": {
              "type": "uuid"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include associated table/s: [User]",
            "require": false,
            "schema": {
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved Member data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/memberResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/memberResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "404": {
            "description": "Retrieving data from Member that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Member not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Member not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Member"
        ],
        "summary": "Delete Member",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Member ID we want to delete",
            "required": true,
            "schema": {
              "type": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted Member",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Member successfully deleted!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Member successfully deleted!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "404": {
            "description": "Retrieving data from Member that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Member not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Member not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/member/{userId}": {
      "put": {
        "tags": [
          "Member"
        ],
        "summary": "Update existing Member",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId from Member we want to update",
            "required": true,
            "schema": {
              "type": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Member",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Member successfully updated!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Member successfully updated!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'First name' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "firstName"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'First name' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "firstName"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/memberUpdateBody"
              }
            }
          }
        }
      }
    },
    "/api/v1/member/subscription/{id}": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Renew Member's subscription",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Member ID whose subscription we want to renew",
            "required": true,
            "schema": {
              "type": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created Member",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successfully updated Member subscription!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successfully updated Member subscription!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "string",
                      "example": "The new subscription expiration date cannot be less than the previous one"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "string",
                      "example": "The new subscription expiration date cannot be less than the previous one"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "404": {
            "description": "Retrieving data from Member that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Member not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Member not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscriptionDateBody"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Member"
        ],
        "summary": "Update Member's last subscription",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Member ID whose last subscription we want to update",
            "required": true,
            "schema": {
              "type": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Successfully created Member",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successfully updated Member subscription!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successfully updated Member subscription!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "string",
                      "example": "The new subscription expiration date cannot be less than the previous one"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "string",
                      "example": "The new subscription expiration date cannot be less than the previous one"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "404": {
            "description": "Retrieving data from Member that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Member not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Member not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscriptionDateBody"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Member"
        ],
        "summary": "Delete Member's last subscription",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Member ID we want to delete last subscription from",
            "required": true,
            "schema": {
              "type": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted Member data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Member Subscription successfully deleted!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Member Subscription successfully deleted!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "string",
                      "example": "Action is not possible, you cannot modify last subscription expiration date!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "string",
                      "example": "Action is not possible, you cannot modify last subscription expiration date!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "404": {
            "description": "Delete subscription from Member that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Member not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Member not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/book/": {
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "Retrieve all books",
        "description": "",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Include associated table. (Genres and/or Author)",
            "require": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Parameter for scrolling through the pages, must be a positive integer",
            "require": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Parameter to limit data on one page, must be a positive integer equal or greater than 1",
            "require": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Books were successfully displayed (including Books and Author)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bookBodyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationError"
                }
              }
            }
          },
          "404": {
            "description": "Error: Association Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/associationNotFound"
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Book"
        ],
        "summary": "Create new book",
        "description": "",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Successfully created Book",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Book successfully created!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Book successfully created!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'Title' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "title"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'Title' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "title"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bookBodyRequest"
              }
            }
          }
        }
      }
    },
    "/api/v1/book/filter-by-title": {
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "Filter books by title",
        "description": "",
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "Title parameter to filter book by title",
            "require": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Parameter for scrolling through the pages, must be a positive integer",
            "require": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Parameter to limit data on one page, must be a positive integer equal or greater than 1",
            "require": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Filtered books were successfully displayed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filteredBookByTitleBodyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationError"
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/book/filter-books": {
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "Filter all books",
        "description": "",
        "parameters": [
          {
            "name": "authorId",
            "in": "query",
            "description": "Author ID parameter to filter book by author (can be one or more author IDs (uuid))",
            "require": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "genreId",
            "in": "query",
            "description": "Genre ID parameter to filter book by genre (can be one or more genre IDs (uuid))",
            "require": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "bookTitleId",
            "in": "query",
            "description": "Book Title ID parameter to filter book by title (can be one or more genre IDs (uuid))",
            "require": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "startYear",
            "in": "query",
            "description": "startYear parameter to filter book by date",
            "require": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "endYear",
            "in": "query",
            "description": "endYear parameter to filter book by date",
            "require": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Tags parameter to filter book by date",
            "require": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Parameter for scrolling through the pages, must be a positive integer",
            "require": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Parameter to limit data on one page, must be a positive integer equal or greater than 1",
            "require": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Filtered books were successfully displayed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bookBodyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationError"
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/book/load-with-isbn": {
      "post": {
        "tags": [
          "Book"
        ],
        "summary": "Create new book using ISBN code and Google Books API",
        "description": "",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Successfully created Book",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Book successfully created!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Book successfully created!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'ISBN' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "isbn"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'ISBN' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "isbn"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bookISBNBodyRequest"
              }
            }
          }
        }
      }
    },
    "/api/v1/book/{id}": {
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "Retrieve specific book",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "uuid"
            },
            "description": "Parameter for get data for specific book",
            "require": true
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include associated table. (Genres and/or Author)",
            "require": false,
            "schema": {
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Book was successfully displayed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/specificBookBodyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationError"
                }
              }
            }
          },
          "404": {
            "description": "Retrieving data from Book that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Book not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Book not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Book"
        ],
        "summary": "Update specific book",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "uuid"
            },
            "description": "Parameter for update data for specific book",
            "require": true
          }
        ],
        "responses": {
          "200": {
            "description": "Author was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/updatedBookBodyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "404": {
            "description": "Retrieving data from Book that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Book not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Book not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updatedBookBodyRequest"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Book"
        ],
        "summary": "Delete specific book",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "uuid"
            },
            "description": "Parameter for delete specific book",
            "require": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted Book",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Book successfully deleted!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Book successfully deleted!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "404": {
            "description": "Retrieving data from Book that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Book not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Book not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/librarian/": {
      "get": {
        "tags": [
          "Librarian"
        ],
        "summary": "Retrieve all Librarians",
        "description": "",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Include associated table/s: [User]",
            "require": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "page",
            "in": "query",
            "require": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "require": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved Librarians",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalItems": {
                          "type": "number",
                          "example": 3
                        },
                        "modelRows": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/librarianResponse"
                          }
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 1
                        },
                        "currentPage": {
                          "type": "number",
                          "example": 0
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalItems": {
                          "type": "number",
                          "example": 3
                        },
                        "modelRows": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/librarianResponse"
                          }
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 1
                        },
                        "currentPage": {
                          "type": "number",
                          "example": 0
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Librarian"
        ],
        "summary": "Create new Librarian",
        "description": "",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Successfully created Librarian",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Librarian successfully created!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Librarian successfully created!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'First name' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "firstName"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'First name' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "firstName"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/librarianBody"
              }
            }
          }
        }
      }
    },
    "/api/v1/librarian/{id}": {
      "get": {
        "tags": [
          "Librarian"
        ],
        "summary": "Retrieve Librarian by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Librarian ID we want to retrieve",
            "required": true,
            "schema": {
              "type": "uuid"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include associated table/s: [User]",
            "require": false,
            "schema": {
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved Librarian data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/librarianResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/librarianResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "404": {
            "description": "Retrieving data from Member that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Member not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Member not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Librarian"
        ],
        "summary": "Delete Librarian",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Librarian ID we want to delete",
            "required": true,
            "schema": {
              "type": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted Librarian",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Librarian successfully deleted!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Librarian successfully deleted!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "404": {
            "description": "Retrieving data from Member that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Member not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Member not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/librarian/{userId}": {
      "put": {
        "tags": [
          "Librarian"
        ],
        "summary": "Update existing Librarian",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId from Librarian we want to update",
            "required": true,
            "schema": {
              "type": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Librarian",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Librarian successfully updated!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Librarian successfully updated!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'First name' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "firstName"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'First name' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "firstName"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/librarianUpdateBody"
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Retrieve all Admins",
        "description": "",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Include associated table/s: [User]",
            "require": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "page",
            "in": "query",
            "require": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "require": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved Admins",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalItems": {
                          "type": "number",
                          "example": 3
                        },
                        "modelRows": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/adminResponse"
                          }
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 1
                        },
                        "currentPage": {
                          "type": "number",
                          "example": 0
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalItems": {
                          "type": "number",
                          "example": 3
                        },
                        "modelRows": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/adminResponse"
                          }
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 1
                        },
                        "currentPage": {
                          "type": "number",
                          "example": 0
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Create new Admin",
        "description": "",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Successfully created Librarian",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Librarian successfully created!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Librarian successfully created!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'First name' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "firstName"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'First name' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "firstName"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/adminBody"
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/{id}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Retrieve Admin by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Admin ID we want to retrieve",
            "required": true,
            "schema": {
              "type": "uuid"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include associated table/s: [User]",
            "require": false,
            "schema": {
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved Admin data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/adminResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "404": {
            "description": "Retrieving data from Admin that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Admin not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Admin not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "Delete Admin",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Admin ID we want to delete",
            "required": true,
            "schema": {
              "type": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted Admin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Admin successfully deleted!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Admin successfully deleted!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "404": {
            "description": "Retrieving data from Admin that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Admin not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Admin not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/{userId}": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Update existing Admin",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId from Admin we want to update",
            "required": true,
            "schema": {
              "type": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Admin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Admin successfully updated!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Admin successfully updated!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'First name' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "firstName"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'First name' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "firstName"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/adminUpdateBody"
              }
            }
          }
        }
      }
    },
    "/api/v1/genre/": {
      "get": {
        "tags": [
          "Genre"
        ],
        "summary": "Retrieve all genres",
        "description": "",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Include associated table. (Books)",
            "require": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Parameter for scrolling through the pages, must be a positive integer",
            "require": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Parameter to limit data on one page, must be a positive integer equal or greater than 1",
            "require": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Genres were successfully displayed (including Books)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genreBodyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationError"
                }
              }
            }
          },
          "404": {
            "description": "Error: Association Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/associationNotFound"
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Genre"
        ],
        "summary": "Create new genre",
        "description": "",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Successfully created Genre",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Genre successfully created!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Genre successfully created!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'Name' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "name"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'Name' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "name"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/genreBodyRequest"
              }
            }
          }
        }
      }
    },
    "/api/v1/genre/filter-by-name": {
      "get": {
        "tags": [
          "Genre"
        ],
        "summary": "Filter genres by name",
        "description": "",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Names of genres to filter",
            "require": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Parameter for scrolling through the pages, must be a positive integer",
            "require": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Parameter to limit data on one page, must be a positive integer equal or greater than 1",
            "require": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Filtered genres were successfully displayed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genreFilterBodyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationError"
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/genre/{id}": {
      "get": {
        "tags": [
          "Genre"
        ],
        "summary": "Retrieve specific genre",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "uuid"
            },
            "description": "Parameter for get data for specific genre",
            "require": true
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include associated table. (Books)",
            "require": false,
            "schema": {
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Genres were successfully displayed (including Books)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/specificGenreBodyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationError"
                }
              }
            }
          },
          "404": {
            "description": "Retrieving data from Genre that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Genre not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Genre not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Genre"
        ],
        "summary": "Delete specific genre",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "uuid"
            },
            "description": "Parameter for delete specific genre",
            "require": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted Genre",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Genre successfully deleted!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Genre successfully deleted!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "404": {
            "description": "Retrieving data from Genre that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Genre not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Genre not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/author/": {
      "get": {
        "tags": [
          "Author"
        ],
        "summary": "Retrieve all authors",
        "description": "",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Include associated table. (Books)",
            "require": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Parameter for scrolling through the pages, must be a positive integer",
            "require": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Parameter to limit data on one page, must be a positive integer equal or greater than 1",
            "require": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authors were successfully displayed (including Books)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorBodyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationError"
                }
              }
            }
          },
          "404": {
            "description": "Error: Association Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/associationNotFound"
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Author"
        ],
        "summary": "Create new author",
        "description": "",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Successfully created Author",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Author successfully created!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Author successfully created!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'Name' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "name"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'Name' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "name"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authorBodyRequest"
              }
            }
          }
        }
      }
    },
    "/api/v1/author/filter-by-name": {
      "get": {
        "tags": [
          "Author"
        ],
        "summary": "Filter authors by name",
        "description": "",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Names of authors to filter",
            "require": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Parameter for scrolling through the pages, must be a positive integer",
            "require": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Parameter to limit data on one page, must be a positive integer equal or greater than 1",
            "require": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Filtered authors were successfully displayed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genreFilterBodyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationError"
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/author/{id}": {
      "get": {
        "tags": [
          "Author"
        ],
        "summary": "Retrieve specific author",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "uuid"
            },
            "description": "Parameter for get data for specific author",
            "require": true
          }
        ],
        "responses": {
          "200": {
            "description": "Author was successfully displayed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/specificAuthorBodyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationError"
                }
              }
            }
          },
          "404": {
            "description": "Retrieving data from Author that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Author not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Author not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Author"
        ],
        "summary": "Update specific author",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "uuid"
            },
            "description": "Parameter for update data for specific author",
            "require": true
          }
        ],
        "responses": {
          "200": {
            "description": "Author was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/updatedAuthorBodyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "404": {
            "description": "Retrieving data from Author that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Author not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Author not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updatedAuthorBodyRequest"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Author"
        ],
        "summary": "Delete specific author",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "uuid"
            },
            "description": "Parameter for delete specific author",
            "require": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted Author",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Author successfully deleted!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Author successfully deleted!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "404": {
            "description": "Retrieving data from Author that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Author not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Author not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/book-genre/": {
      "post": {
        "tags": [
          "Book Genre"
        ],
        "summary": "Add genre to the book",
        "description": "",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Genre for book successfully created!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Genre for book successfully created!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'genreId' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "genreId"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'genreId' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "genreId"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bookGenreBodyRequest"
              }
            }
          }
        }
      }
    },
    "/api/v1/book-genre/{genreId}/{bookId}": {
      "delete": {
        "tags": [
          "Book Genre"
        ],
        "summary": "Delete genre from the book",
        "description": "",
        "parameters": [
          {
            "name": "genreId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "uuid"
            },
            "description": "ID genre parameter for delete specific book genre",
            "require": true
          },
          {
            "name": "bookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "uuid"
            },
            "description": "ID book parameter for delete specific book genre",
            "require": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted book genre",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Book genre successfully deleted!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Book genre successfully deleted!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "404": {
            "description": "Retrieving data from Book genre that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Combination is not found in a join table BookGenre"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Combination is not found in a join table BookGenre"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Login",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in!"
                    },
                    "token": {
                      "type": "string",
                      "example": "jwtToken"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in!"
                    },
                    "token": {
                      "type": "string",
                      "example": "jwtToken"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'Email' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "email"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'Email' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "email"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Login with email that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "User not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "User not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loginBody"
              }
            }
          }
        }
      }
    },
    "/api/v1/user/profile": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "User profile",
        "description": "",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Include associated table/s: [User]",
            "require": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "page",
            "in": "query",
            "require": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "require": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved User profile data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/profileData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/profileData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Retrieving data from User that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "User not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "User not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/profile/password": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update password",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully updated password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password updated successfully!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password updated successfully!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'New password' must be atleast 6 characters long"
                          },
                          "param": {
                            "type": "string",
                            "example": "newPassword"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'New password' must be atleast 6 characters long"
                          },
                          "param": {
                            "type": "string",
                            "example": "newPassword"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/passwordUpdate"
              }
            }
          }
        }
      }
    },
    "/api/v1/user/password-reset": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Password Reset",
        "description": "",
        "parameters": [],
        "responses": {
          "201": {
            "description": "User found and email sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Request sent, an email with password reset link has been sent to your address!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Request sent, an email with password reset link has been sent to your address!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'Email' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "email"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'Email' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "email"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Sending email to user that does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "User not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "User not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "email": "useremail@gmail.com"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/password-create": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Password Create",
        "description": "",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User password updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password updated successfully!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password updated successfully!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'New password' must be atleast 6 characters long"
                          },
                          "param": {
                            "type": "string",
                            "example": "newPassword"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'New password' must be atleast 6 characters long"
                          },
                          "param": {
                            "type": "string",
                            "example": "newPassword"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/passwordCreate"
              }
            }
          }
        }
      }
    },
    "/api/v1/lending/": {
      "post": {
        "tags": [
          "Lending"
        ],
        "summary": "Lend a book to a library member",
        "description": "",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Lending successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Lending successfully created!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Lending successfully created!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'memberId' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "memberId"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "'memberId' must be provided"
                          },
                          "param": {
                            "type": "string",
                            "example": "memberId"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lendingBody"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Lending"
        ],
        "summary": "Retrieve data about all lendings",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "require": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "require": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "require": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lending successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalItems": {
                          "type": "number",
                          "example": 1
                        },
                        "modelRows": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/lendingResponse"
                          }
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 1
                        },
                        "currentPage": {
                          "type": "number",
                          "example": 0
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalItems": {
                          "type": "number",
                          "example": 1
                        },
                        "modelRows": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/lendingResponse"
                          }
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 1
                        },
                        "currentPage": {
                          "type": "number",
                          "example": 0
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "':id' must be a uuid"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          },
                          "location": {
                            "type": "string",
                            "example": "params"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "':id' must be a uuid"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          },
                          "location": {
                            "type": "string",
                            "example": "params"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Association with alias 'aa' does not exist on 'Lending'"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Association with alias 'aa' does not exist on 'Lending'"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/lending/getMemberLendings": {
      "get": {
        "tags": [
          "Lending"
        ],
        "summary": "Retrieve data about all lendings for a library specific member",
        "description": "",
        "parameters": [
          {
            "name": "isActive",
            "in": "query",
            "require": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "require": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "require": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "mId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lending successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalItems": {
                          "type": "number",
                          "example": 1
                        },
                        "modelRows": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/lendingSimplifiedResponse"
                          }
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 1
                        },
                        "currentPage": {
                          "type": "number",
                          "example": 0
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalItems": {
                          "type": "number",
                          "example": 1
                        },
                        "modelRows": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/lendingSimplifiedResponse"
                          }
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 1
                        },
                        "currentPage": {
                          "type": "number",
                          "example": 0
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "Value after 'page' must be a positive integer"
                          },
                          "param": {
                            "type": "string",
                            "example": "page"
                          },
                          "location": {
                            "type": "string",
                            "example": "param"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "Value after 'page' must be a positive integer"
                          },
                          "param": {
                            "type": "string",
                            "example": "page"
                          },
                          "location": {
                            "type": "string",
                            "example": "param"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Association with alias 'aa' does not exist on 'Lending'"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Association with alias 'aa' does not exist on 'Lending'"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/lending/{id}": {
      "get": {
        "tags": [
          "Lending"
        ],
        "summary": "Retrieve data about a specific lending",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include associated table/s: [Member, Book]",
            "require": false,
            "schema": {
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lending successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lendingResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/lendingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "Value after 'page' must be a positive integer"
                          },
                          "param": {
                            "type": "string",
                            "example": "page"
                          },
                          "location": {
                            "type": "string",
                            "example": "param"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "Value after 'page' must be a positive integer"
                          },
                          "param": {
                            "type": "string",
                            "example": "page"
                          },
                          "location": {
                            "type": "string",
                            "example": "param"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Association with alias 'aa' does not exist on 'Lending'"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Association with alias 'aa' does not exist on 'Lending'"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/lending/bookReturn/{id}": {
      "put": {
        "tags": [
          "Lending"
        ],
        "summary": "Make a book return",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Book successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Book is successfully returned."
                    },
                    "lateFee": {
                      "type": "string",
                      "example": "0.00"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Book is successfully returned."
                    },
                    "lateFee": {
                      "type": "string",
                      "example": "0.00"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "string",
                      "example": "This book has already been returned."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "string",
                      "example": "This book has already been returned."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/permissionError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Lending not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "details": {
                      "type": "string",
                      "example": "Lending not found!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/serverError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "memberBody": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Member name"
          },
          "lastName": {
            "type": "string",
            "example": "Member surname"
          },
          "email": {
            "format": "email",
            "type": "string",
            "example": "member@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "password"
          },
          "address": {
            "type": "string",
            "example": "Endicott, NY 13760"
          },
          "dateOfBirth": {
            "type": "date",
            "example": "1999-01-01"
          }
        }
      },
      "memberUpdateBody": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Member name"
          },
          "lastName": {
            "type": "string",
            "example": "Member surname"
          },
          "address": {
            "type": "string",
            "example": "Endicott, NY 13760"
          },
          "dateOfBirth": {
            "type": "date",
            "example": "1999-01-01"
          }
        }
      },
      "memberResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "uuid",
            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
          },
          "address": {
            "type": "string",
            "example": "Endicott, NY 13760"
          },
          "dateOfBirth": {
            "type": "date",
            "example": "1999-01-01"
          },
          "userId": {
            "type": "uuid",
            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "subscriptionExpirationDate": {
            "type": "date",
            "example": "2023-03-26"
          },
          "bookLimit": {
            "type": "number",
            "example": null
          },
          "history": {
            "type": "items",
            "example": [
              {
                "end": "2023-03-26",
                "start": "2023-02-24"
              }
            ]
          },
          "createdAt": {
            "type": "date",
            "example": "2023-03-09T15:46:37.843Z"
          },
          "updatedAt": {
            "type": "date",
            "example": "2023-03-09T15:46:37.843Z"
          },
          "User": {
            "type": "object",
            "$ref": "#/components/schemas/userResponse"
          }
        }
      },
      "memberResponseWithoutId": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "example": "Endicott, NY 13760"
          },
          "dateOfBirth": {
            "type": "date",
            "example": "1999-01-01"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "subscriptionExpirationDate": {
            "type": "date",
            "example": "2023-03-26"
          },
          "bookLimit": {
            "type": "number",
            "example": null
          },
          "history": {
            "type": "items",
            "example": [
              {
                "end": "2023-03-26",
                "start": "2023-02-24"
              }
            ]
          },
          "createdAt": {
            "type": "date",
            "example": "2023-03-09T15:46:37.843Z"
          },
          "updatedAt": {
            "type": "date",
            "example": "2023-03-09T15:46:37.843Z"
          },
          "User": {
            "type": "object",
            "$ref": "#/components/schemas/userResponseWithoutId"
          }
        }
      },
      "librarianBody": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Librarian name"
          },
          "lastName": {
            "type": "string",
            "example": "Librarian surname"
          },
          "email": {
            "format": "email",
            "type": "string",
            "example": "librarian@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "password"
          },
          "address": {
            "type": "string",
            "example": "Endicott, NY 13760"
          },
          "dateOfBirth": {
            "type": "date",
            "example": "1999-01-01"
          }
        }
      },
      "librarianUpdateBody": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Librarian name"
          },
          "lastName": {
            "type": "string",
            "example": "Librarian surname"
          },
          "address": {
            "type": "string",
            "example": "Endicott, NY 13760"
          },
          "dateOfBirth": {
            "type": "date",
            "example": "1999-01-01"
          }
        }
      },
      "librarianResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "uuid",
            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
          },
          "address": {
            "type": "string",
            "example": "Endicott, NY 13760"
          },
          "dateOfBirth": {
            "type": "date",
            "example": "1999-01-01"
          },
          "userId": {
            "type": "uuid",
            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "type": "date",
            "example": "2023-03-09T15:46:37.843Z"
          },
          "updatedAt": {
            "type": "date",
            "example": "2023-03-09T15:46:37.843Z"
          },
          "User": {
            "type": "object",
            "$ref": "#/components/schemas/userResponse"
          }
        }
      },
      "adminBody": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Admin name"
          },
          "lastName": {
            "type": "string",
            "example": "Admin surname"
          },
          "email": {
            "format": "email",
            "type": "string",
            "example": "admin@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "password"
          }
        }
      },
      "adminUpdateBody": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Admin name"
          },
          "lastName": {
            "type": "string",
            "example": "Admin surname"
          }
        }
      },
      "adminResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "uuid",
            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
          },
          "userId": {
            "type": "uuid",
            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "type": "date",
            "example": "2023-03-09T15:46:37.843Z"
          },
          "updatedAt": {
            "type": "date",
            "example": "2023-03-09T15:46:37.843Z"
          },
          "User": {
            "type": "object",
            "$ref": "#/components/schemas/userResponse"
          }
        }
      },
      "userResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "uuid",
            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
          },
          "firstName": {
            "type": "string",
            "example": "name"
          },
          "lastName": {
            "type": "string",
            "example": "surname"
          },
          "email": {
            "format": "email",
            "type": "string",
            "example": "user@gmail.com"
          },
          "roleId": {
            "type": "uuid",
            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
          },
          "createdAt": {
            "type": "date",
            "example": "2023-03-09T15:46:37.843Z"
          },
          "updatedAt": {
            "type": "date",
            "example": "2023-03-09T15:46:37.843Z"
          }
        }
      },
      "userResponseWithoutId": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "name"
          },
          "lastName": {
            "type": "string",
            "example": "surname"
          },
          "email": {
            "format": "email",
            "type": "string",
            "example": "user@gmail.com"
          },
          "createdAt": {
            "type": "date",
            "example": "2023-03-09T15:46:37.843Z"
          },
          "updatedAt": {
            "type": "date",
            "example": "2023-03-09T15:46:37.843Z"
          }
        }
      },
      "subscriptionDateBody": {
        "type": "object",
        "properties": {
          "date": {
            "type": "date",
            "example": "2023-04-27"
          }
        }
      },
      "loginBody": {
        "type": "object",
        "properties": {
          "email": {
            "format": "email",
            "type": "string",
            "example": "test@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "test123"
          }
        }
      },
      "profileData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/memberResponseWithoutId"
          }
        }
      },
      "passwordUpdate": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "example": "password"
          },
          "newPassword": {
            "type": "string",
            "example": "password"
          }
        }
      },
      "passwordCreate": {
        "type": "object",
        "properties": {
          "newPassword": {
            "type": "string",
            "example": "password"
          }
        }
      },
      "genreBodyResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "totalItems": {
                "type": "integer",
                "example": 4
              },
              "modelRows": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "uuid",
                      "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                    },
                    "name": {
                      "type": "string",
                      "example": "Genre name"
                    },
                    "Books": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "uuid",
                            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                          },
                          "isbn": {
                            "type": "string",
                            "example": "0738531367"
                          },
                          "title": {
                            "type": "string",
                            "example": "Book title"
                          },
                          "dateOfRelease": {
                            "type": "date",
                            "example": "2022-12-12"
                          },
                          "tags": {
                            "type": "jsonb",
                            "example": [
                              "first",
                              "second",
                              "third"
                            ]
                          },
                          "authorId": {
                            "type": "uuid",
                            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                          },
                          "isActive": {
                            "type": "boolean",
                            "example": true
                          },
                          "BookGenre": {
                            "type": "object",
                            "properties": {
                              "genreId": {
                                "type": "uuid",
                                "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                              },
                              "bookId": {
                                "type": "uuid",
                                "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "totalPages": {
                "type": "integer",
                "example": 3
              },
              "currentPage": {
                "type": "integer",
                "example": 1
              }
            }
          }
        }
      },
      "specificGenreBodyResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "uuid",
                "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
              },
              "name": {
                "type": "string",
                "example": "Genre name"
              },
              "Books": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "uuid",
                      "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                    },
                    "isbn": {
                      "type": "string",
                      "example": "0738531367"
                    },
                    "title": {
                      "type": "string",
                      "example": "Book title"
                    },
                    "dateOfRelease": {
                      "type": "date",
                      "example": "2022-12-12"
                    },
                    "tags": {
                      "type": "jsonb",
                      "example": [
                        "first",
                        "second",
                        "third"
                      ]
                    },
                    "authorId": {
                      "type": "uuid",
                      "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                    },
                    "isActive": {
                      "type": "boolean",
                      "example": true
                    },
                    "BookGenre": {
                      "type": "object",
                      "properties": {
                        "genreId": {
                          "type": "uuid",
                          "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                        },
                        "bookId": {
                          "type": "uuid",
                          "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "genreFilterBodyResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "uuid",
                  "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                },
                "name": {
                  "type": "string",
                  "example": "Genre name"
                }
              }
            }
          }
        }
      },
      "genreBodyRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Genre name"
          }
        }
      },
      "bookGenreBodyRequest": {
        "type": "object",
        "required": [
          "genreId",
          "bookId"
        ],
        "properties": {
          "genreId": {
            "type": "uuid",
            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
          },
          "bookId": {
            "type": "uuid",
            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
          }
        }
      },
      "authorBodyResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "totalItems": {
                "type": "integer",
                "example": 4
              },
              "modelRows": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "uuid",
                      "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                    },
                    "name": {
                      "type": "string",
                      "example": "Author name"
                    },
                    "isActive": {
                      "type": "boolean",
                      "example": true
                    },
                    "dateOfBirth": {
                      "type": "date",
                      "example": "1997-12-12"
                    },
                    "Books": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "uuid",
                            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                          },
                          "isbn": {
                            "type": "string",
                            "example": "0738531367"
                          },
                          "title": {
                            "type": "string",
                            "example": "Book title"
                          },
                          "dateOfRelease": {
                            "type": "date",
                            "example": "2022-12-12"
                          },
                          "tags": {
                            "type": "jsonb",
                            "example": [
                              "first",
                              "second",
                              "third"
                            ]
                          },
                          "authorId": {
                            "type": "uuid",
                            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                          },
                          "isActive": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "totalPages": {
                "type": "integer",
                "example": 3
              },
              "currentPage": {
                "type": "integer",
                "example": 1
              }
            }
          }
        }
      },
      "specificAuthorBodyResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "uuid",
                "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
              },
              "name": {
                "type": "string",
                "example": "Author name"
              },
              "isActive": {
                "type": "boolean",
                "example": true
              },
              "dateOfBirth": {
                "type": "date",
                "example": "1997-12-12"
              }
            }
          }
        }
      },
      "updatedAuthorBodyResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Author successfully updated!"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "uuid",
                  "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                },
                "name": {
                  "type": "string",
                  "example": "Author name"
                },
                "isActive": {
                  "type": "boolean",
                  "example": true
                },
                "dateOfBirth": {
                  "type": "date",
                  "example": "1997-12-12"
                }
              }
            }
          }
        }
      },
      "authorBodyRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Author name"
          },
          "dateOfBirth": {
            "type": "date",
            "example": "1997-12-12"
          }
        }
      },
      "updatedAuthorBodyRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Author name"
          },
          "dateOfBirth": {
            "type": "date",
            "example": "1997-12-12"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "bookBodyResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "totalItems": {
                "type": "integer",
                "example": 4
              },
              "modelRows": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "uuid",
                      "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                    },
                    "isbn": {
                      "type": "string",
                      "example": "0738531367"
                    },
                    "title": {
                      "type": "string",
                      "example": "Book title"
                    },
                    "dateOfRelease": {
                      "type": "date",
                      "example": "2022-12-12"
                    },
                    "tags": {
                      "type": "jsonb",
                      "example": [
                        "first",
                        "second",
                        "third"
                      ]
                    },
                    "authorId": {
                      "type": "uuid",
                      "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                    },
                    "isActive": {
                      "type": "boolean",
                      "example": true
                    },
                    "Author": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "uuid",
                          "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                        },
                        "name": {
                          "type": "string",
                          "example": "Author name"
                        },
                        "isActive": {
                          "type": "boolean",
                          "example": true
                        },
                        "dateOfBirth": {
                          "type": "date",
                          "example": "1997-12-12"
                        }
                      }
                    },
                    "Genres": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "uuid",
                            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                          },
                          "name": {
                            "type": "string",
                            "example": "Genre name"
                          },
                          "BookGenre": {
                            "type": "object",
                            "properties": {
                              "genreId": {
                                "type": "uuid",
                                "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                              },
                              "bookId": {
                                "type": "uuid",
                                "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "totalPages": {
                "type": "integer",
                "example": 3
              },
              "currentPage": {
                "type": "integer",
                "example": 1
              }
            }
          }
        }
      },
      "filteredBookByTitleBodyResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "uuid",
                  "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                },
                "isbn": {
                  "type": "string",
                  "example": "0738531367"
                },
                "title": {
                  "type": "string",
                  "example": "Book title"
                },
                "dateOfRelease": {
                  "type": "date",
                  "example": "2022-12-12"
                },
                "tags": {
                  "type": "jsonb",
                  "example": [
                    "first",
                    "second",
                    "third"
                  ]
                },
                "authorId": {
                  "type": "uuid",
                  "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                },
                "isActive": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        }
      },
      "specificBookBodyResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "uuid",
                "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
              },
              "isbn": {
                "type": "string",
                "example": "0738531367"
              },
              "title": {
                "type": "string",
                "example": "Book title"
              },
              "dateOfRelease": {
                "type": "date",
                "example": "2022-12-12"
              },
              "tags": {
                "type": "jsonb",
                "example": [
                  "first",
                  "second",
                  "third"
                ]
              },
              "authorId": {
                "type": "uuid",
                "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
              },
              "isActive": {
                "type": "boolean",
                "example": true
              },
              "Author": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "uuid",
                    "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                  },
                  "name": {
                    "type": "string",
                    "example": "Author name"
                  },
                  "isActive": {
                    "type": "boolean",
                    "example": true
                  },
                  "dateOfBirth": {
                    "type": "date",
                    "example": "1997-12-12"
                  }
                }
              },
              "Genres": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "uuid",
                      "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                    },
                    "name": {
                      "type": "string",
                      "example": "Genre name"
                    },
                    "BookGenre": {
                      "type": "object",
                      "properties": {
                        "genreId": {
                          "type": "uuid",
                          "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                        },
                        "bookId": {
                          "type": "uuid",
                          "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "updatedBookBodyResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Book successfully updated!"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "uuid",
                "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
              },
              "isbn": {
                "type": "string",
                "example": "0738531367"
              },
              "title": {
                "type": "string",
                "example": "Book title"
              },
              "dateOfRelease": {
                "type": "date",
                "example": "2022-12-12"
              },
              "tags": {
                "type": "jsonb",
                "example": [
                  "first",
                  "second",
                  "third"
                ]
              },
              "authorId": {
                "type": "uuid",
                "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
              },
              "isActive": {
                "type": "boolean",
                "example": true
              }
            }
          }
        }
      },
      "bookBodyRequest": {
        "type": "object",
        "required": [
          "title",
          "dateOfRelease",
          "authorId"
        ],
        "properties": {
          "isbn": {
            "type": "string",
            "example": "0738531367"
          },
          "title": {
            "type": "string",
            "example": "Book Title"
          },
          "dateOfRelease": {
            "type": "date",
            "example": "1997-12-12"
          },
          "tags": {
            "type": "jsonb",
            "example": [
              "first",
              "second",
              "third"
            ]
          },
          "authorId": {
            "type": "uuid",
            "example": "124747a4-ee03-445c-a66c-c8ba510839bb"
          },
          "genreId": {
            "type": "uuid",
            "example": "124747a4-ee03-445c-a66c-c8ba510839bb"
          }
        }
      },
      "updatedBookBodyRequest": {
        "type": "object",
        "required": [
          "title",
          "dateOfRelease",
          "authorId"
        ],
        "properties": {
          "isbn": {
            "type": "string",
            "example": "0738531367"
          },
          "title": {
            "type": "string",
            "example": "Book Title"
          },
          "dateOfRelease": {
            "type": "date",
            "example": "1997-12-12"
          },
          "tags": {
            "type": "jsonb",
            "example": [
              "first",
              "second",
              "third"
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "authorId": {
            "type": "uuid",
            "example": "124747a4-ee03-445c-a66c-c8ba510839bb"
          }
        }
      },
      "bookISBNBodyRequest": {
        "type": "object",
        "required": [
          "isbn"
        ],
        "properties": {
          "isbn": {
            "type": "string",
            "example": "0738531367"
          }
        }
      },
      "associationNotFound": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Not Found"
          },
          "details": {
            "type": "string",
            "example": "Association with alias 'AssociationName' does not exist on 'ModelName'"
          }
        }
      },
      "validationError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Invalid input"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string",
                  "example": "Value after 'page' must be a positive integer"
                },
                "param": {
                  "type": "string",
                  "example": "page"
                },
                "location": {
                  "type": "string",
                  "example": "query"
                }
              }
            }
          }
        }
      },
      "unauthorizedError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Unauthorized access"
          },
          "details": {
            "type": "string",
            "example": "Missing authorization from headers!"
          }
        }
      },
      "permissionError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Forbidden"
          },
          "details": {
            "type": "string",
            "example": "Only users with correct ID and ROLE have access for this action."
          }
        }
      },
      "serverError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Internal server error"
          }
        }
      },
      "memberOnlyResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "uuid",
            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
          },
          "User": {
            "type": "object",
            "properties": {
              "email": {
                "format": "email",
                "type": "string",
                "example": "member@gmail.com"
              }
            }
          }
        }
      },
      "lendingBody": {
        "type": "object",
        "properties": {
          "actionId": {
            "type": "uuid",
            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bfa"
          },
          "memberId": {
            "type": "uuid",
            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bfb"
          },
          "bookId": {
            "type": "uuid",
            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bfc"
          }
        }
      },
      "bookOnlyResponse": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Book title"
          }
        }
      },
      "lendingResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "uuid",
            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
          },
          "memberId": {
            "type": "uuid",
            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
          },
          "bookId": {
            "type": "uuid",
            "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
          },
          "lentDate": {
            "type": "string",
            "example": "2023-01-01"
          },
          "expiredDate": {
            "type": "string",
            "example": "2023-01-02"
          },
          "returnedDate": {
            "type": "string",
            "example": "2023-01-03"
          },
          "lateFee": {
            "type": "string",
            "example": "0.10"
          },
          "isActive": {
            "type": "boolean",
            "example": "true"
          },
          "createdAt": {
            "type": "date",
            "example": "2023-03-09T15:46:37.843Z"
          },
          "updatedAt": {
            "type": "date",
            "example": "2023-03-09T15:46:37.843Z"
          },
          "Book": {
            "type": "object",
            "$ref": "#/components/schemas/bookOnlyResponse"
          },
          "Member": {
            "type": "object",
            "$ref": "#/components/schemas/memberOnlyResponse"
          }
        }
      },
      "lendingSimplifiedResponse": {
        "type": "object",
        "properties": {
          "lentDate": {
            "type": "string",
            "example": "2023-01-01"
          },
          "expiredDate": {
            "type": "string",
            "example": "2023-01-02"
          },
          "returnedDate": {
            "type": "string",
            "example": "2023-01-03"
          },
          "lateFee": {
            "type": "string",
            "example": "0.10"
          },
          "isActive": {
            "type": "boolean",
            "example": "true"
          },
          "Book": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "example": "Book title"
              }
            }
          },
          "Member": {
            "type": "object",
            "properties": {
              "userId": {
                "type": "uuid",
                "example": "4aa78666-c9cb-4020-aaf1-5f623a854bff"
              },
              "User": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "example": "name"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "surname"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}